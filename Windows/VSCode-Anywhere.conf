{
'base': {
	'proxy': { 'url': null,
			   'login': null,
			   'password': null },
	'vsc_url': null,
	'msys2_url': null,
	'zip_url': 'https://www.7-zip.org/a/7za920.zip',
	'msys2_opts': [ 'Font="DejaVu Sans Mono for Powerline"',
					 'Term="xterm-256color"',
					 'BackgroundColour="0,43,54"',
					 'RightClickAction="paste"' ],
	'zeal_enabled': false,
	'zeal_url': null
},
'extensions': {
	'minimal': {
		'enabled': false,
		'cmd_pre': [ 'if (!(Test-Path -Path "${ThirdParty}\\git\\bin\\git.exe")) { New-Item -ItemType Directory -Force -Path "${ThirdParty}\\git"; Set-Variable -Name url -Value (Invoke-WebRequest -Uri "https://api.github.com/repos/git-for-windows/git/releases/latest"); Set-Variable -Name url -Value ((Get-Variable -Name url -valueOnly).Content | ConvertFrom-Json); Set-Variable -Name url -Value ((Get-Variable -Name url -valueOnly).assets.browser_download_url -match "-64-bit.7z.exe$"); Invoke-WebRequest -Uri ([System.Uri]([string](Get-Variable -Name url -valueOnly))) -OutFile "${ThirdParty}\\git\\git.7z.exe"; 7zipExtract "${ThirdParty}\\git\\git.7z.exe" "${ThirdParty}\\git"; Copy-Item "${ThirdParty}\\git\\mingw64\\bin\\git-lfs.exe" -Destination "${ThirdParty}\\git\\bin\\git-lfs.exe" }' ],
		'msys2_cmd_pre': [ 'mkdir -p /usr/local/bin /opt' ],
		'msys2_pkg': null,
		'vsc_pkg': null,
		'vsc_settings': { 'workbench.statusBar.feedback.visible': false,
						  'workbench.settings.editor': 'json' },
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'sed -i "s@^db_shell.*@db_shell: /usr/bin/bash@g" /etc/nsswitch.conf' ],
		'cmd_post': null,
		'msys2_cmd_update': [ 'yes y | LC_ALL=C pacman -Syu' ],
		'cmd_update': [ 'Set-Variable -Name version -Value (&"${ThirdParty}\\git\\bin\\git.exe" --version).split()[-1]; Set-Variable -Name url -Value (Invoke-WebRequest -Uri "https://api.github.com/repos/git-for-windows/git/releases/latest"); Set-Variable -Name url -Value ((Get-Variable -Name url -valueOnly).Content | ConvertFrom-Json); Set-Variable -Name tag -Value ((Get-Variable -Name url -valueOnly).tag_name); Set-Variable -Name url -Value ((Get-Variable -Name url -valueOnly).assets.browser_download_url -match "-64-bit.7z.exe$"); if ((Get-Variable -Name tag -valueOnly) -ne "v" + (Get-Variable -Name version -valueOnly)) { Remove-Item "${ThirdParty}\\git" -Force -Recurse; New-Item -ItemType directory -Path "${ThirdParty}\\git"; Invoke-WebRequest -Uri ([System.Uri]([string](Get-Variable -Name url -valueOnly))) -OutFile "${ThirdParty}\\git\\git.7z.exe"; 7zipExtract "${ThirdParty}\\git\\git.7z.exe" "${ThirdParty}\\git"; Copy-Item "${ThirdParty}\\git\\mingw64\\bin\\git-lfs.exe" -Destination "${ThirdParty}\\git\\bin\\git-lfs.exe" }' ],
		'zeal_pkg': null,
		'msys2_env': { 'path': '${ThirdParty}\\git\\bin;$MSYS2AppPath_install\\usr\\local\\bin;$MSYS2AppPath_install\\mingw64\\bin;$MSYS2AppPath_install\\mingw64\\x86_64-w64-mingw32\\bin;$MSYS2AppPath_install\\mingw32\\bin;$MSYS2AppPath_install\\home\\$ProgramName\\bin;$MSYS2AppPath_install\\home\\$ProgramName\\.local\\bin;' },
		'vsc_env': { 'path': '${ThirdParty}\\git\\bin;$MSYS2AppPath_install\\usr\\local\\bin;$MSYS2AppPath_install\\usr\\bin;$MSYS2AppPath_install\\mingw64\\bin;$MSYS2AppPath_install\\mingw32\\bin;$MSYS2AppPath_install\\home\\$ProgramName\\bin;$MSYS2AppPath_install\\home\\$ProgramName\\.local\\bin;' }
	},
	'general': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': null,
		'vsc_pkg': [ 'alefragnani.Bookmarks',
					 'alefragnani.project-manager',
					 'christian-kohler.path-intellisense',
					 'CoenraadS.bracket-pair-colorizer',
					 'formulahendry.code-runner',
					 'spywhere.guides',
					 'ybaumes.highlight-trailing-white-spaces',
					 'axosoft.gitkraken-glo' ],
		'vsc_settings': { 'editor.renderIndentGuides': false,
						  'projectManager.projectsLocation': '$VSCAppPath_user_data\\User' },
		'vsc_keyboard': [ { 'key': 'alt+l', 'command': 'bookmarks.toggle', 'when': 'editorTextFocus' } ],
		'msys2_cmd_post': null,
		'cmd_post': null,
		'msys2_cmd_update': null,
		'cmd_update': null,
		'zeal_pkg': null,
		'msys2_env': null,
		'vsc_env': null
	},
	'git': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': null,
		'vsc_pkg': [ 'donjayamanne.githistory',
					 'eamodio.gitlens',
					 'Hirse.vscode-ungit' ],
		'vsc_settings': { 'gitlens.defaultGravatarsStyle': 'retro',
						  'ungit.showButton': true },
		'vsc_keyboard': null,
		'msys2_cmd_post': null,
		'cmd_post': null,
		'msys2_cmd_update': null,
		'cmd_update': null,
		'zeal_pkg': null,
		'msys2_env': null,
		'vsc_env': null
	},
	'theme': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': null,
		"vsc_pkg": [ 'xaver.theme-ysgrifennwr',
					 'yogipatel.solarized-light-no-bold',
					 'robertohuertasm.vscode-icons',
					 'akamud.vscode-theme-onedark' ],
		'vsc_settings': { 'workbench.iconTheme': 'vscode-icons',
						  'workbench.colorTheme': 'Atom One Dark',
						  'vsicons.dontShowNewVersionMessage': true,
						  'window.titleBarStyle': 'custom',
						  'window.menuBarVisibility': 'toggle' },
		'zeal_pkg': null,
		'msys2_env': null,
		'vsc_env': null
	},
	'VSC-fonts': {
		'enabled': false,
		'cmd_pre': [ 'if (!(Test-Path -Path "$FontsDir\\FiraCode-Bold.ttf")) { Invoke-WebRequest -Uri https://github.com/tonsky/FiraCode/raw/master/distr/ttf/FiraCode-Bold.ttf -OutFile "$FontsDir\\FiraCode-Bold.ttf"; (New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\FiraCode-Bold.ttf", 0x10) }',
					 'if (!(Test-Path -Path "$FontsDir\\FiraCode-Light.ttf")) { Invoke-WebRequest -Uri https://github.com/tonsky/FiraCode/raw/master/distr/ttf/FiraCode-Light.ttf -OutFile "$FontsDir\\FiraCode-Light.ttf"; (New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\FiraCode-Light.ttf", 0x10) }',
					 'if (!(Test-Path -Path "$FontsDir\\FiraCode-Medium.ttf")) { Invoke-WebRequest -Uri https://github.com/tonsky/FiraCode/raw/master/distr/ttf/FiraCode-Medium.ttf -OutFile "$FontsDir\\FiraCode-Medium.ttf"; (New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\FiraCode-Medium.ttf", 0x10) }',
					 'if (!(Test-Path -Path "$FontsDir\\FiraCode-Regular.ttf")) { Invoke-WebRequest -Uri https://github.com/tonsky/FiraCode/raw/master/distr/ttf/FiraCode-Regular.ttf -OutFile "$FontsDir\\FiraCode-Regular.ttf"; (New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\FiraCode-Regular.ttf", 0x10) }',
					 'if (!(Test-Path -Path "$FontsDir\\FiraCode-Retina.ttf")) { Invoke-WebRequest -Uri https://github.com/tonsky/FiraCode/raw/master/distr/ttf/FiraCode-Retina.ttf -OutFile "$FontsDir\\FiraCode-Retina.ttf"; (New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\FiraCode-Retina.ttf", 0x10) }' ],
		'msys2_cmd_pre': null,
		'msys2_pkg': null,
		'vsc_pkg': null,
		'vsc_settings': { 'editor.fontLigatures': true,
						  'editor.fontFamily': 'Fira Code' },
		'vsc_keyboard': null,
		'msys2_cmd_post': null,
		'cmd_post': null,
		'msys2_cmd_update': null,
		'cmd_update': null,
		'zeal_pkg': null,
		'msys2_env': null,
		'vsc_env': null
	},
	'tmux-gigix': {
		'enabled': false,
		'cmd_pre': [ 'if (!(Test-Path -Path "$FontsDir\\DejaVuSansMono-Bold-Oblique-Powerline.ttf")) { Invoke-WebRequest -Uri https://github.com/powerline/fonts/raw/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20Bold%20Oblique%20for%20Powerline.ttf -OutFile "$FontsDir\\DejaVuSansMono-Bold-Oblique-Powerline.ttf"; (New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\DejaVuSansMono-Bold-Oblique-Powerline.ttf", 0x10) }',
					 'if (!(Test-Path -Path "$FontsDir\\DejaVuSansMono-Bold-Powerline.ttf")) { Invoke-WebRequest -Uri https://github.com/powerline/fonts/raw/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20Bold%20for%20Powerline.ttf -OutFile "$FontsDir\\DejaVuSansMono-Bold-Powerline.ttf"; (New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\DejaVuSansMono-Bold-Powerline.ttf", 0x10) }',
					 'if (!(Test-Path -Path "$FontsDir\\DejaVuSansMono-Oblique-Powerline.ttf")) { Invoke-WebRequest -Uri https://github.com/powerline/fonts/raw/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20Oblique%20for%20Powerline.ttf -OutFile "$FontsDir\\DejaVuSansMono-Oblique-Powerline.ttf"; (New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\DejaVuSansMono-Oblique-Powerline.ttf", 0x10) }',
					 'if (!(Test-Path -Path "$FontsDir\\DejaVuSansMono-Powerline.ttf")) { Invoke-WebRequest -Uri https://github.com/powerline/fonts/raw/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20for%20Powerline.ttf -OutFile "$FontsDir\\DejaVuSansMono-Powerline.ttf";(New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\DejaVuSansMono-Powerline.ttf", 0x10) }' ],
		'msys2_cmd_pre': null,
		'msys2_pkg': [ 'curl',
					   'zsh',
					   'tmux' ],
		'vsc_pkg': null,
		'vsc_settings': { 'terminal.integrated.shell.windows': '$MSYS2AppPath_install\\usr\\bin\\zsh.exe' },
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'test -f /etc/tmux.conf || (curl https://raw.githubusercontent.com/gigi206/tmux-gigix/master/tmux.conf > /etc/tmux.conf && echo "set-option -g default-shell /usr/bin/zsh" >> /etc/tmux.conf)',
							'test -d ~/.oh-my-zsh || (sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh | egrep -v \"^\\s*env zsh\")")',
							'test -d ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting || (cd ~/.oh-my-zsh/custom/plugins && git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting.git)',
							'test -d ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions || (cd ~/.oh-my-zsh/custom/plugins && git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions.git)',
							'sed -ie "/^plugins=(/,/)/c test \\$TERM = tmux-256color && plugins=(git zsh-syntax-highlighting zsh-autosuggestions) || plugins=(git zsh-syntax-highlighting)" ~/.zshrc',
							"egrep -q '^PROMPT' ~/.zshrc && sed -i s#^PROMPT=.*#PROMPT=\"\\'%{\\$fg[green]%}%n%{\\$fg[white]%}@%{\\$fg[magenta]%}%m%{\\$fg[white]%}:%{\\$fg[cyan]%}%~%{\\$reset_color%}\' \'\\${ret_status}\\$(git_prompt_info)%{\\$reset_color%}\\'\"#g ~/.zshrc || echo PROMPT=\"\\'%{\\$fg[green]%}%n%{\\$fg[white]%}@%{\\$fg[magenta]%}%m%{\\$fg[white]%}:%{\\$fg[cyan]%}%~%{\\$reset_color%}\" \"\\${ret_status}\\$(git_prompt_info)%{\\$reset_color%}\\'\" >> ~/.zshrc",
							'test -f ~/.oh-my-zsh/custom/VSCode-Anywhere.zsh || curl https://raw.githubusercontent.com/gigi206/tmux-gigix/master/demo.zsh > ~/.oh-my-zsh/custom/VSCode-Anywhere.zsh',
							'sed -i "s@^db_shell.*@db_shell: /usr/local/bin/tmux-gigix@g" /etc/nsswitch.conf',
							'test -x /usr/local/bin/tmux-gigix || (echo "cd; /usr/bin/tmux -2u attach -t VSCode-Anywhere || /usr/bin/tmux -2u new -s VSCode-Anywhere" > /usr/local/bin/tmux-gigix && chmod +x /usr/local/bin/tmux-gigix)' ],
		'cmd_post': null,
		'msys2_cmd_update': null,
		'cmd_update': null,
		'zeal_pkg': null,
		'msys2_env': null,
		'vsc_env': null
	},
	'vim-gigix': {
		'enabled': false,
		'cmd_pre': [ 'if (!(Test-Path -Path "$FontsDir\\DejaVuSansMono-Bold-Oblique-Powerline.ttf")) { Invoke-WebRequest -Uri https://github.com/powerline/fonts/raw/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20Bold%20Oblique%20for%20Powerline.ttf -OutFile "$FontsDir\\DejaVuSansMono-Bold-Oblique-Powerline.ttf"; (New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\DejaVuSansMono-Bold-Oblique-Powerline.ttf", 0x10) }',
					 'if (!(Test-Path -Path "$FontsDir\\DejaVuSansMono-Bold-Powerline.ttf")) { Invoke-WebRequest -Uri https://github.com/powerline/fonts/raw/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20Bold%20for%20Powerline.ttf -OutFile "$FontsDir\\DejaVuSansMono-Bold-Powerline.ttf"; (New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\DejaVuSansMono-Bold-Powerline.ttf", 0x10) }',
					 'if (!(Test-Path -Path "$FontsDir\\DejaVuSansMono-Oblique-Powerline.ttf")) { Invoke-WebRequest -Uri https://github.com/powerline/fonts/raw/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20Oblique%20for%20Powerline.ttf -OutFile "$FontsDir\\DejaVuSansMono-Oblique-Powerline.ttf"; (New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\DejaVuSansMono-Oblique-Powerline.ttf", 0x10) }',
					 'if (!(Test-Path -Path "$FontsDir\\DejaVuSansMono-Powerline.ttf")) { Invoke-WebRequest -Uri https://github.com/powerline/fonts/raw/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20for%20Powerline.ttf -OutFile "$FontsDir\\DejaVuSansMono-Powerline.ttf";(New-Object -ComObject Shell.Application).Namespace(0x14).CopyHere("$FontsDir\\DejaVuSansMono-Powerline.ttf", 0x10) }' ],
		'msys2_cmd_pre': null,
		'msys2_pkg': [ 'curl',
					   'python3',
					   'vim' ],
		'vsc_pkg': null,
		'vsc_settings': null,
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'test -f ~/.vimrc || (curl https://raw.githubusercontent.com/gigi206/vim-gigix/master/.vimrc | sed "s@\\(.*dein#add.*Valloric/YouCompleteMe.*\\)@\\"\\1@g" > ~/.vimrc)',
							'test -d ~/.vim/bundle || (sh <(curl -s https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh) ~/.vim/bundle && vim -c "try | call dein#update() | call dein#recache_runtimepath() | finally | qall! | endtry" -N -u ~/.vimrc -U NONE -i NONE -V1 -e -s)' ],
		'cmd_post': null,
		'msys2_cmd_update': [ 'vim -c "try | call dein#update() | call dein#recache_runtimepath() | finally | qall! | endtry" -N -u ~/.vimrc -U NONE -i NONE -V1 -e -s' ],
		'cmd_update': null,
		'zeal_pkg': [ 'Vim' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'python': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': [ 'python2',
					   'python2-pip',
					   'python3',
					   'python3-pip',
					   'ctags' ],
		'vsc_pkg': [ 'ms-python.python',
					 'VisualStudioExptTeam.vscodeintellicode' ],
		'vsc_settings': { 'python.linting.pylintEnabled': false,
						  'python.linting.flake8Enabled': true,
						  'python.linting.enabled': true,
						  'python.disableInstallationCheck': true,
						  'python.jediEnabled': true,
						  'vsintellicode.python.completionsEnabled': false },
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'pip2 install rope flake8 autopep8',
							'pip3 install rope flake8 autopep8' ],
		'cmd_post': null,
		'msys2_cmd_update': [ 'pip2 install -U rope flake8 autopep8',
							  'pip3 install -U rope flake8 autopep8' ],
		'cmd_update': null,
		'zeal_pkg': [ 'Python_2', 'Python_3', 'PEPs' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'ruby': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': [ 'ruby',
					   'gcc',
		 			   'make',
					   'autoconf',
					   'gmp',
					   'gmp-devel',
					   'libcrypt', 'libcrypt-devel',
					   'libiconv', 'libiconv-devel',
					   'libxml2', 'libxml2-devel',
					   'libxslt', 'libxslt-devel' ],
		'vsc_pkg': [ 'rebornix.Ruby',
					 'castwide.solargraph' ],
		'vsc_settings': { 'ruby.lint': { 'reek': true,
										 'rubocop': false,
										 'ruby': true,
										 'fasterer': true,
										 'debride': true,
										 'ruby-lint': true },
						  'ruby.codeCompletion': false,
						  'ruby.format': false,
						  'ruby.intellisense': false,
						  'solargraph.autoformat': true,
						  'solargraph.hover': true,
						  'solargraph.completion': true,
						  'solargraph.diagnostics': true,
						  'solargraph.formatting': true },
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'gem list | egrep "^rubygems-update " || gem install rubygems-update',
							'gem list | egrep "^ruby-debug-ide " || gem install ruby-debug-ide',
							'gem list | egrep "^debase " || gem install debase',
							'gem list | egrep "^rubocop " || gem install rubocop',
							'gem list | egrep "^rcodetools " || gem install rcodetools',
							'gem list | egrep "^fastri " || gem install fastri',
							'gem list | egrep "^reek " || gem install reek',
							'gem list | egrep "^fasterer " || gem install fasterer',
							'gem list | egrep "^debride " || gem install debride',
							'gem list | egrep "^ruby-lint " || gem install ruby-lint',
							'gem list | egrep "^pkg-config " || gem install pkg-config',
							'gem list | egrep "^solargraph " || gem install solargraph -- --use-system-libraries' ],
		'cmd_post': null,
		'msys2_cmd_update': [ 'gem update rubygems-update ruby-debug-ide debase rubocop rcodetools fastri reek fasterer debride ruby-lint pkg-config solargraph' ],
		'cmd_update': null,
		'zeal_pkg': [ 'Ruby', 'Ruby_2' ],
		'msys2_env': { 'path': '$MSYS2AppPath_install\\home\\$ProgramName\\.gem\\ruby\\2.4.0\\bin;' },
		'vsc_env': { 'path': '$MSYS2AppPath_install\\home\\$ProgramName\\.gem\\ruby\\2.4.0\\bin;' }
	},
	'perl': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': [ 'perl',
					   'ctags',
					   'gcc',
					   'make' ],
		'vsc_pkg': [ 'henriiik.vscode-perl',
					 'mortenhenriksen.perl-debug' ],
		'vsc_settings': { 'perl.perltidy': '$MSYS2AppPath_install\\usr\\bin\\site_perl\\perltidy' },
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'test -x /usr/bin/site_perl/perltidy || yes yes | perl /usr/bin/core_perl/cpan Perl::Tidy' ],
		'cmd_post': null,
		'msys2_cmd_update': [ 'cpan Perl::Tidy' ],
		'cmd_update': null,
		'zeal_pkg': [ 'Perl', 'Perl6' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'C/C++': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': [ 'gcc' ],
		'vsc_pkg': [ 'ms-vscode.cpptools' ],
		'vsc_settings': null,
		'vsc_keyboard': null,
		'msys2_cmd_post': null,
		'cmd_post': [ 'Set-Location "$VSCAppPath_extensions\\ms-vscode.cpptools-*\\bin"; Copy-Item -Force -Path "msvc.64.linux.json" -Destination "msvc.64.intel.json"' ],
		'msys2_cmd_update': null,
		'cmd_update': null,
		'zeal_pkg': [ 'C', 'C++' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'shell': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': [ 'unzip' ],
		'vsc_pkg': [ 'timonwong.shellcheck' ],
		'vsc_settings': null,
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'test -x /usr/local/bin/shellcheck || (mkdir -p /usr/local/bin/shellcheck-tmp && cd /usr/local/bin/shellcheck-tmp && curl https://storage.googleapis.com/shellcheck/shellcheck-stable.zip > shellcheck.zip && unzip shellcheck.zip && mv shellcheck-stable.exe ../shellcheck.exe && cd .. && rm -fr shellcheck-tmp)' ],
		'cmd_post': null,
		'msys2_cmd_update': [ 'test -x /usr/local/bin/shellcheck && test v`/usr/local/bin/shellcheck --version | grep "^version" | cut -d " " -f 2 | sed "s/^M//g"` = `git ls-remote --tags https://github.com/koalaman/shellcheck.git | egrep "refs/tags/v[0-9]+\\.[0-9]+\\.[0-9]+$" | tail -1 | cut -d "/" -f 3` || (mkdir -p /usr/local/bin/shellcheck-tmp && cd /usr/local/bin/shellcheck-tmp && curl https://storage.googleapis.com/shellcheck/shellcheck-stable.zip > shellcheck.zip && unzip shellcheck.zip && mv shellcheck-stable.exe ../shellcheck.exe && cd .. && rm -fr shellcheck-tmp)' ],
		'cmd_update': null,
		'zeal_pkg': [ 'Bash', 'Zsh', 'Linux_Man_Pages' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'go': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': [ 'unzip',
					   'gcc' ],
		'vsc_pkg': [ 'ms-vscode.go' ],
		'vsc_settings': { 'go.useLanguageServer': true,
						  'go.lintTool': 'gometalinter' },
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'mkdir -p /opt/go-modules',
							'test -x /opt/go/bin/go || (rm -fr /opt/go && curl https://dl.google.com/go/`curl -s https://golang.org/dl/ | egrep windows-amd64.zip | sed "s@.*\\(go.*\\).windows-amd64.zip.*@\\1@1" | head -1`.windows-amd64.zip > /opt/go.zip && cd /opt && unzip go.zip && rm go.zip)',
							'test -f /opt/go-modules/bin/go-outline.exe || go get -u -v github.com/ramya-rao-a/go-outline',
							'test -f /opt/go-modules/bin/go-symbols.exe || go get -u -v github.com/acroca/go-symbols',
							'test -f /opt/go-modules/bin/gocode.exe || go get -u -v github.com/nsf/gocode',
							'test -f /opt/go-modules/bin/godef.exe || go get -u -v github.com/rogpeppe/godef',
							'test -f /opt/go-modules/bin/godoc.exe || go get -u -v golang.org/x/tools/cmd/godoc',
							'test -f /opt/go-modules/bin/gogetdoc.exe || go get -u -v github.com/zmb3/gogetdoc',
							'test -f /opt/go-modules/bin/golint.exe || go get -u -v github.com/golang/lint/golint',
							'test -f /opt/go-modules/bin/gomodifytags.exe || go get -u -v github.com/fatih/gomodifytags',
							'test -f /opt/go-modules/bin/gopkgs.exe || go get -u -v github.com/uudashr/gopkgs/cmd/gopkgs',
							'test -f /opt/go-modules/bin/gorename.exe || go get -u -v golang.org/x/tools/cmd/gorename',
							'test -f /opt/go-modules/bin/goreturns.exe || go get -u -v sourcegraph.com/sqs/goreturns',
							'test -f /opt/go-modules/bin/goimports.exe || go get -u -v golang.org/x/tools/cmd/goimports',
							'test -d /opt/go-modules/src/github.com/cweill/gotests || GOPATH="/opt/go-modules" go get -u -v github.com/cweill/gotests',
							'test -f /opt/go-modules/bin/guru.exe || go get -u -v golang.org/x/tools/cmd/guru',
							'test -f /opt/go-modules/bin/impl.exe || go get -u -v github.com/josharian/impl',
							'test -f /opt/go-modules/bin/goplay.exe || go get -u -v github.com/haya14busa/goplay/cmd/goplay',
							'test -f /opt/go-modules/bin/fillstruct.exe || go get -u -v github.com/davidrjenni/reftools/cmd/fillstruct',
							'test -f /opt/go-modules/bin/dlv.exe || go get -u -v github.com/derekparker/delve/cmd/dlv',
							'test -f /opt/go-modules/bin/gometalinter.exe || go get -u -v github.com/alecthomas/gometalinter',
							'test -f /opt/go-modules/bin/gotype-live || go get -u -v github.com/tylerb/gotype-live',
							'test -f /opt/go-modules/bin/go-langserver || go get -u -v github.com/sourcegraph/go-langserver' ],
		'cmd_post': null,
		'msys2_cmd_update': [ 'test `curl -s https://golang.org/dl/ | egrep windows-amd64.zip | sed "s@.*\\(go.*\\).windows-amd64.zip.*@\\1@1" | head -1` = `go version | cut -d " " -f 3` || (rm -fr /opt/go && curl https://dl.google.com/go/`curl -s https://golang.org/dl/ | egrep windows-amd64.zip | sed "s@.*\\(go.*\\).windows-amd64.zip.*@\\1@1" | head -1`.windows-amd64.zip > /opt/go.zip && cd /opt && unzip go.zip && rm go.zip)',
							  'go get -u -v github.com/ramya-rao-a/go-outline',
							  'go get -u -v github.com/acroca/go-symbols',
							  'go get -u -v github.com/nsf/gocode',
							  'go get -u -v github.com/rogpeppe/godef',
							  'go get -u -v golang.org/x/tools/cmd/godoc',
							  'go get -u -v github.com/zmb3/gogetdoc',
							  'go get -u -v github.com/golang/lint/golint',
							  'go get -u -v github.com/fatih/gomodifytags',
							  'go get -u -v github.com/uudashr/gopkgs/cmd/gopkgs',
							  'go get -u -v golang.org/x/tools/cmd/gorename',
							  'go get -u -v sourcegraph.com/sqs/goreturns',
							  'go get -u -v golang.org/x/tools/cmd/goimports',
							  'go get -u -v github.com/cweill/gotests',
							  'go get -u -v golang.org/x/tools/cmd/guru',
							  'go get -u -v github.com/josharian/impl',
							  'go get -u -v github.com/haya14busa/goplay/cmd/goplay',
							  'go get -u -v github.com/davidrjenni/reftools/cmd/fillstruct',
							  'go get -u -v github.com/derekparker/delve/cmd/dlv',
							  'go get -u -v github.com/alecthomas/gometalinter',
							  'go get -u -v github.com/tylerb/gotype-live',
							  'go get -u -v github.com/sourcegraph/go-langserver' ],
		'cmd_update': null,
		'zeal_pkg': [ 'Go' ],
		'msys2_env': { 'path': '$MSYS2AppPath_install\\opt\\go\\bin;$MSYS2AppPath_install\\opt\\go-modules\\bin;',
					   'GOPATH': '$MSYS2AppPath_install\\opt\\go-modules' },
		'vsc_env': { 'path': '$MSYS2AppPath_install\\opt\\go\\bin;$MSYS2AppPath_install\\opt\\go-modules\\bin;',
					 'GOPATH': '$MSYS2AppPath_install\\opt\\go-modules' }
	},
	'java': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': [ 'tar' ],
		'vsc_pkg': [ 'vscjava.vscode-java-pack' ],
		'vsc_settings': null,
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'test -x /opt/jdk-10/bin/java || (rm -fr /opt/jdk-10 && cd /opt && curl `curl -s http://jdk.java.net/10/ | egrep "openjdk-[0-9]+\\.[0-9]+\\.[0-9]+_windows-x64_bin.tar.gz" | sed "s@.*href=.\\(.*\\)\\>.*@\\1@1" | head -1` > java.tar.gz && tar xvzf java.tar.gz && mv jdk-* jdk-10 && rm java.tar.gz)' ],
		'cmd_post': null,
		'msys2_cmd_update': [ 'test `java --version | head -1 | cut -d " " -f 2` = `curl -s http://jdk.java.net/10/ | egrep "openjdk-[0-9]+\\.[0-9]+\\.[0-9]+_windows-x64_bin.tar.gz" | sed "s@.*openjdk-\\(.*\\)_windows-x64_bin.tar.gz.*@\\1@1" | head -1` || (rm -fr /opt/jdk-10 && cd /opt && curl `curl -s http://jdk.java.net/10/ | egrep "openjdk-[0-9]+\\.[0-9]+\\.[0-9]+_windows-x64_bin.tar.gz" | sed "s@.*href=.\\(.*\\)\\>.*@\\1@1" | head -1` > java.tar.gz && tar xvzf java.tar.gz && mv jdk-* jdk-10 && rm java.tar.gz)' ],
		'cmd_update': null,
		'zeal_pkg': [ 'Java_SE8', 'Java_SE9' ],
		'msys2_env': { 'path': '$MSYS2AppPath_install\\opt\\jdk-10\\bin;' },
		'vsc_env': { 'path': '$MSYS2AppPath_install\\opt\\jdk-10\\bin;' }
	},
	'php': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': [ 'mkdir -p /opt/php' ],
		'msys2_pkg': [ 'unzip' ],
		'vsc_pkg': [ 'felixfbecker.php-intellisense',
					 'felixfbecker.php-debug' ],
		'vsc_settings': { 'php.validate.run': 'onType',
						  'php.executablePath': '$MSYS2AppPath_install\\opt\\php\\php.exe',
						  'php.validate.executablePath': '$MSYS2AppPath_install\\opt\\php\\php.exe' },
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'test -x /opt/php/php.exe || (rm -fr /opt/php && mkdir /opt/php && cd /opt/php && curl -s https://windows.php.net/downloads/releases/sha1sum.txt | egrep "php-[0-9]+\\.[0-9]+\\.[0-9]+-Win32-VC[0-9]+-x64.zip" | cut -d " " -f3 | sort -n | tail -1 | xargs echo https://windows.php.net/downloads/releases/ | sed "s@ @@g" | xargs curl > php.zip && unzip php.zip && rm php.zip)' ],
		'cmd_post': null,
		'msys2_cmd_update': [ 'test `curl -s https://windows.php.net/downloads/releases/sha1sum.txt | egrep "php-[0-9]+\\.[0-9]+\\.[0-9]+-Win32-VC[0-9]+-x64.zip" | cut -d " " -f3 | sort -n | tail -1 | cut -d "-" -f 2` = `/opt/php/php.exe --version | head -1 | cut -d " " -f 2` || (rm -fr /opt/php && mkdit /opt/php && cd /opt/php && curl -s https://windows.php.net/downloads/releases/sha1sum.txt | egrep "php-[0-9]+\\.[0-9]+\\.[0-9]+-Win32-VC[0-9]+-x64.zip" | cut -d " " -f3 | sort -n | tail -1 | xargs echo https://windows.php.net/downloads/releases/ | sed "s@ @@g" | xargs curl > php.zip && unzip php.zip && rm php.zip)' ],
		'cmd_update': null,
		'zeal_pkg': [ 'PHP' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'javascript': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': [ 'mingw-w64-x86_64-nodejs' ],
		'vsc_pkg': [ 'waderyan.nodejs-extension-pack' ],
		'vsc_settings': { 'eslint.alwaysShowStatus': true },
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'npm ls -g --depth=0 | grep " eslint@" || npm install -g eslint' ],
		'cmd_post': null,
		'msys2_cmd_update': [ 'npm update -g eslint' ],
		'cmd_update': null,
		'zeal_pkg': [ 'JavaScript' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'html': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': null,
		'vsc_pkg': [ 'Zignd.html-css-class-completion',
					 'pranaygp.vscode-css-peek',
					 'bradgashler.htmltagwrap' ],
		'vsc_settings': null,
		'vsc_keyboard': null,
		'msys2_cmd_post': null,
		'cmd_post': null,
		'msys2_cmd_update': null,
		'cmd_update': null,
		'zeal_pkg': [ 'CSS', 'HTML', 'Emmet' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'powershell': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': null,
		'vsc_pkg': [ 'ms-vscode.PowerShell' ],
		'vsc_settings': { 'dash.docset.powershell': [ 'posh' ] },
		'vsc_keyboard': null,
		'msys2_cmd_post': null,
		'cmd_post': null,
		'msys2_cmd_update': null,
		'cmd_update': null,
		'zeal_pkg': [ 'Powershell' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'docker': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': null,
		'vsc_pkg': [ 'PeterJausovec.vscode-docker' ],
		'vsc_settings': { 'dash.docset.dockerfile': [ 'docker' ] },
		'vsc_keyboard': null,
		'msys2_cmd_post': null,
		'cmd_post': null,
		'msys2_cmd_update': null,
		'cmd_update': null,
		'zeal_pkg': [ 'Docker' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'ansible': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': null,
		'vsc_pkg': [ 'haaaad.ansible' ],
		'vsc_settings': null,
		'vsc_keyboard': null,
		'msys2_cmd_post': null,
		'cmd_post': null,
		'msys2_cmd_update': null,
		'cmd_update': null,
		'zeal_pkg': [ 'Ansible', 'Jinja' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'puppet': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': null,
		'vsc_pkg': [ 'bitzl.vscode-puppet' ],
		'vsc_settings': null,
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'gem list | egrep "^puppet-lint " || gem install puppet-lint' ],
		'cmd_post': null,
		'msys2_cmd_update': [ 'gem update puppet-lint' ],
		'cmd_update': null,
		'zeal_pkg': [ 'Puppet' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'salstack': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': null,
		'vsc_pkg': [ 'korekontrol.saltstack' ],
		'vsc_settings': { 'dash.docset.sls': [ 'salt' ] },
		'vsc_keyboard': null,
		'msys2_cmd_post': null,
		'cmd_post': null,
		'msys2_cmd_update': null,
		'cmd_update': null,
		'zeal_pkg': [ 'SaltStack', 'Jinja' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'chef': {
		'enabled': false,
		'cmd_pre': null,
		'junest_cmd_pre': null,
		'junest_pkg': [ 'ruby',
						'rubygems',
						'gcc',
						'make',
						'file',
						'gawk' ],
		'vsc_pkg': [ 'Pendrica.Chef' ],
		'vsc_settings': { 'foodcritic.enable': true,
						  'dash.docset.ruby': [ 'ruby', 'rubygems', 'rails', 'chef' ] },
		'vsc_keyboard': null,
		'junest_cmd_post': [ 'gem list | egrep "^rdoc " || gem install --no-user-install rdoc',
							 'gem list | egrep "^chef " || gem install --no-user-install chef',
							 'gem list | egrep "^cookstyle  " || gem install --no-user-install cookstyle',
							 'gem list | egrep "^foodcritic  " || gem install --no-user-install foodcritic',
							 'gem list | egrep "^rubocop " || gem install --no-user-install rubocop' ],
		'cmd_post': null,
		'junest_cmd_update': [ 'gem update --no-user-install rdoc chef cookstyle foodcritic rubocop' ],
		'cmd_update': null,
		'zeal_pkg': [ 'Chef' ],
		'junest_env': null,
		'vsc_env': null
	},
	'markdown': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': null,
		'vsc_pkg': [ 'DavidAnson.vscode-markdownlint',
					 'mdickin.markdown-shortcuts',
					 'AlanWalk.markdown-toc' ],
		'vsc_settings': { 'markdown-toc.depthFrom': 2 },
		'vsc_keyboard': null,
		'msys2_cmd_post': null,
		'cmd_post': null,
		'msys2_cmd_update': null,
		'cmd_update': null,
		'zeal_pkg': [ 'Markdown' ],
		'msys2_env': null,
		'vsc_env': null
	},
	'restructuredtext': {
		'enabled': false,
		'cmd_pre': null,
		'msys2_cmd_pre': null,
		'msys2_pkg': [ 'python3',
					   'python3-pip' ],
		'vsc_pkg': [ 'lextudio.restructuredtext' ],
		'vsc_settings': null,
		'vsc_keyboard': null,
		'msys2_cmd_post': [ 'pip3 install doc8 sphinx sphinx-autobuild' ],
		'cmd_post': null,
		'msys2_cmd_update': ['pip3 install -U doc8 sphinx sphinx-autobuild' ],
		'cmd_update': null,
		'zeal_pkg': null,
		'msys2_env': null,
		'vsc_env': null
	}
}
}