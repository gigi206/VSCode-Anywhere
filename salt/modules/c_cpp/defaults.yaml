default:
  enabled: False
  llvm: False
  vscode:
    settings:
      dash.languageIdToDocsetMap.c:
        - c
    extensions:
      ms-vscode.cpptools:
        enabled: True
        version: null
        settings:
          C_Cpp.default.cStandard: c11
          C_Cpp.default.cppStandard: c++17
      ms-vscode.cmake-tools:
        enabled: True
        version: null
      jbenden.c-cpp-flylint:
        enabled: True
        version: null
        settings:
          c-cpp-flylint.flexelint.enable: False
          c-cpp-flylint.cppcheck.enable: False
          c-cpp-flylint.clang.enable: True
      matepek.vscode-catch2-test-adapter:
        enabled: True
        version: null
  zeal:
    docsets:
      C:
        enabled: True
        version: null
      C++:
        enabled: True
        version: null
Windows:
{%- if salt['pillar.get']('vscode-anywhere:c_cpp:llvm', False) %}
  msys2:
    pkgs:
      mingw-w64-x86_64-clang:
        enabled: True
      mingw-w64-x86_64-lldb:
        enabled: True
      mingw-w64-x86_64-make:
        enabled: True
      mingw-w64-x86_64-cmake:
        enabled: True
  vscode:
    settings:
      code-runner.executorMap.c: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('scoop', 'apps', 'msys2', 'current' ,'mingw64', 'bin', 'clang.exe') }} $fileName -o $fileNameWithoutExt.exe && $fileNameWithoutExt.exe
      code-runner.executorMap.cpp: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('scoop', 'apps', 'msys2', 'current' ,'mingw64', 'bin', 'clang++.exe') }} $fileName -o $fileNameWithoutExt.exe && $fileNameWithoutExt.exe
    extensions:
      ms-vscode.cpptools:
        settings:
          C_Cpp.default.compilerPath: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('scoop', 'apps', 'msys2', 'current' ,'mingw64', 'bin', 'clang.exe') }}
      jbenden.c-cpp-flylint:
        settings:
          c-cpp-flylint.clang.executable: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('scoop', 'apps', 'msys2', 'current' ,'mingw64', 'bin', 'clang.exe') }}
{%- else %}
  msys2:
    pkgs:
      mingw-w64-x86_64-gcc:
        enabled: True
      mingw-w64-x86_64-gdb:
        enabled: True
      mingw-w64-x86_64-cppcheck:
        enabled: True
      mingw-w64-x86_64-make:
        enabled: True
      mingw-w64-x86_64-cmake:
        enabled: True
      # autoconf:
      #   enabled: True
      # automake:
      #   enabled: True
  vscode:
    settings:
      code-runner.executorMap.c: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('scoop', 'apps', 'msys2', 'current' ,'mingw64', 'bin', 'gcc.exe') }} $fileName -o $fileNameWithoutExt.exe && $fileNameWithoutExt.exe
      code-runner.executorMap.cpp: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('scoop', 'apps', 'msys2', 'current' ,'mingw64', 'bin', 'g++.exe') }} $fileName -o $fileNameWithoutExt.exe && $fileNameWithoutExt.exe
    extensions:
      ms-vscode.cpptools:
        settings:
          C_Cpp.default.compilerPath: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('scoop', 'apps', 'msys2', 'current' ,'mingw64', 'bin', 'gcc.exe') }}
      jbenden.c-cpp-flylint:
        settings:
          c-cpp-flylint.clang.enable: False
          c-cpp-flylint.cppcheck.enable: True
          c-cpp-flylint.cppcheck.executable: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('scoop', 'apps', 'msys2', 'current' ,'mingw64', 'bin', 'cppcheck.exe') }}
{%- endif %}
      ms-vscode.cmake-tools:
        settings:
          cmake.cmakePath: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('scoop', 'apps', 'msys2', 'current' ,'mingw64', 'bin', 'cmake.exe') }}
Linux:
  # env:
  #   LDFLAGS: "-L/home/linuxbrew/.linuxbrew/opt/llvm/lib -Wl,-rpath,/home/linuxbrew/.linuxbrew/opt/llvm/lib"
  brew:
    pkgs:
      make:
        enabled: True
      cmake:
        enabled: True
      # autoconf:
      #   enabled: True
      # automake:
      #   enabled: True
{%- if salt['pillar.get']('vscode-anywhere:c_cpp:llvm', False) %}
      llvm:
        enabled: True
        # options:
        #   - --with-toolchain
        #   - --with-clang
{%- else %}
      gcc:
        enabled: True
      gdb:
        enabled: True
      cppcheck:
        enabled: True
{%- endif %}
{%- if salt['pillar.get']('vscode-anywhere:c_cpp:llvm', False) %}
  vscode:
    settings:
      # code-runner.executorMap.c: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('linuxbrew', '.linuxbrew', 'bin', 'clang') }} $fileName -o $fileNameWithoutExt && $fileNameWithoutExt
      # code-runner.executorMap.cpp: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('linuxbrew', '.linuxbrew', 'bin', 'clang++') }} $fileName -o $fileNameWithoutExt && $fileNameWithoutExt
      code-runner.executorMap.c: /home/linuxbrew/.linuxbrew/bin/clang $fileName -o $fileNameWithoutExt && $fileNameWithoutExt
      code-runner.executorMap.cpp: /home/linuxbrew/.linuxbrew/bin/clang++ $fileName -o $fileNameWithoutExt && $fileNameWithoutExt
    extensions:
      ms-vscode.cpptools:
        settings:
          # C_Cpp.default.compilerPath: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('linuxbrew', '.linuxbrew', 'bin', 'clang') }}
          C_Cpp.default.compilerPath: /home/linuxbrew/.linuxbrew/bin/clang
      jbenden.c-cpp-flylint:
        settings:
          # c-cpp-flylint.clang.executable: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('linuxbrew', '.linuxbrew', 'bin', 'clang') }}
          c-cpp-flylint.clang.executable: /home/linuxbrew/.linuxbrew/bin/clang
{%- else %}
  vscode:
    settings:
      # code-runner.executorMap.c: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('linuxbrew', '.linuxbrew', 'bin', 'gcc') }} $fileName -o $fileNameWithoutExt && $fileNameWithoutExt
      # code-runner.executorMap.cpp: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('linuxbrew', '.linuxbrew', 'bin', 'g++') }} $fileName -o $fileNameWithoutExt && $fileNameWithoutExt
      code-runner.executorMap.c: /home/linuxbrew/.linuxbrew/bin/gcc $fileName -o $fileNameWithoutExt && $fileNameWithoutExt
      code-runner.executorMap.cpp: /home/linuxbrew/.linuxbrew/bin/g++ $fileName -o $fileNameWithoutExt && $fileNameWithoutExt
    extensions:
      ms-vscode.cpptools:
        settings:
          # C_Cpp.default.compilerPath: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('linuxbrew', '.linuxbrew', 'bin', 'gcc') }}
          C_Cpp.default.compilerPath: /home/linuxbrew/.linuxbrew/bin/gcc
      jbenden.c-cpp-flylint:
        settings:
          c-cpp-flylint.clang.enable: False
          c-cpp-flylint.cppcheck.enable: True
          # c-cpp-flylint.cppcheck.executable: {{ salt['grains.get']('vscode-anywhere:apps:path') | path_join('linuxbrew', '.linuxbrew', 'bin', 'cppcheck') }}
          c-cpp-flylint.cppcheck.executable: /home/linuxbrew/.linuxbrew/bin/cppcheck
{%- endif %}
      ms-vscode.cmake-tools:
        settings:
          cmake.cmakePath: /home/linuxbrew/.linuxbrew/bin/cmake